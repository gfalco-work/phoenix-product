name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

  workflow_dispatch:
    inputs:
      deploy_to_prod:
        description: 'Deploy to Production'
        required: true
        type: boolean
        default: false

permissions:
  contents: write
  id-token: write

env:
  REGISTRY: ghcr.io
  REPO: ${{ github.repository }}
  SHORT_SHA: ${{ github.sha }}
  AWS_REGION: eu-west-2

jobs:
  build:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set Short SHA
        id: set_sha
        run: echo "SHORT_SHA=$(echo '${{ github.sha }}' | cut -c1-8)" >> $GITHUB_ENV

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'zulu'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Compile Java
        run: ./gradlew compileJava -Dorg.gradle.java.home=$JAVA_HOME

      - name: Determine and bump version
        run: |
          CURRENT_VERSION=$(sed -n 's/^version = "\(.*\)"/\1/p' build.gradle)
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV 
          .github/scripts/bump_version.sh
          NEW_VERSION=$(sed -n 's/^version = "\(.*\)"/\1/p' build.gradle)
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV 

      - name: Create and push version tag
        if: env.NEW_VERSION != env.CURRENT_VERSION
        run: |
          git add build.gradle
          git commit -m "Bump version to $NEW_VERSION"
          git tag "v$NEW_VERSION"
          git push origin main --tags
          echo "Version updated and pushed successfully"

      - name: Build and package with Jib
        id: prep
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.REPO }}"
          TAGS="${{ env.NEW_VERSION }},${{ env.SHORT_SHA }}"
          echo "image=${IMAGE}" >> "$GITHUB_OUTPUT"
          echo "tags=${TAGS}" >> "$GITHUB_OUTPUT"
      - run: |
          ./gradlew jib \
            -Djib.to.image=${{ steps.prep.outputs.image }} \
            -Djib.to.tags=${{ steps.prep.outputs.tags }} \
            -Djib.to.auth.username=${{ github.actor }} \
            -Djib.to.auth.password=${{ secrets.PAT }}

      - name: Update Image for Development
        run: |
          sed -i '' "s|image:.*|image: ghcr.io/gfalco-work/phoenix-price:${{ env.SHORT_SHA }}|g" ./kubernetes/deployment.yml
          git commit -am "Update price-service image for development: ${{ env.SHORT_SHA }}"
          git push

  build-and-push-production:
    if: github.event.inputs.deploy_to_production == 'true'
    needs: build
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: phoenix-ecr
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG