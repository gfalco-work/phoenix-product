plugins {
    id 'application'
    id 'org.springframework.boot' version '3.5.0'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.google.cloud.tools.jib' version '3.4.5'
    id 'org.jetbrains.kotlin.jvm' version '2.1.21'
    id 'org.jetbrains.kotlin.plugin.spring' version '2.1.21'
    id 'io.freefair.lombok' version '8.13.1'
}

version = "0.1.0"
group = "com.phoenix.product"

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://packages.confluent.io/maven/'}
    maven {
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/gfalco-work/phoenix-observability")
        credentials {
            username = System.getenv("GITHUB_USERNAME")
            password = System.getenv("GITHUB_TOKEN")
        }
    }
    maven {
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/gfalco-work/phoenix-events")
        credentials {
            username = System.getenv("GITHUB_USERNAME")
            password = System.getenv("GITHUB_TOKEN")
        }
    }
}

kotlin {
    jvmToolchain(21)
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'jakarta.servlet:jakarta.servlet-api'

    // Phoenix libs
    implementation 'com.phoenix.events:common:1.1.1'
    implementation 'com.phoenix.events:product-events:1.1.1'
    implementation 'com.phoenix:phoenix-observability:1.2.0'

    // Kotlin essentials
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'io.github.microutils:kotlin-logging:3.0.5'

    // For coroutines with WebFlux
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-reactor'

    // Flyway
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'

    // Runtime dependencies
    runtimeOnly 'org.postgresql:r2dbc-postgresql'
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'org.springframework.boot:spring-boot-starter-jdbc'

    // Test dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
    testImplementation 'io.mockk:mockk:1.14.3'
    testImplementation 'com.ninja-squad:springmockk:4.0.2'

    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:r2dbc'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.testcontainers:kafka'
    testImplementation 'io.projectreactor:reactor-test'
}

application {
    mainClass = "com.phoenix.product.ApplicationKt"
}

sourceSets {
    integrationTest {
        java.srcDir file('src/integrationTest/kotlin')
        resources.srcDir file('src/integrationTest/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

tasks.register('integrationTest', Test) {
    description = 'Runs integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    shouldRunAfter test
    useJUnitPlatform()
}

//check.dependsOn integrationTest

integrationTest.enabled=false