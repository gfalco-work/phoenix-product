openapi: 3.1.1

info:
  title: Product Service API
  description: API for managing products in the ecommerce system
  version: 1.0.0
servers:
  - url: http://localhost:8300
    description: Development server

paths:
  /api/v1/products:
    get:
      summary: Get all products
      operationId: getAllProducts
      tags:
        - Products
      parameters:
        - name: page
          in: query
          required: false
          description: Page number (0-based)
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: size
          in: query
          required: false
          description: Page size
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: category
          in: query
          required: false
          description: Filter by category
          schema:
            type: string
        - name: brand
          in: query
          required: false
          description: Filter by brand
          schema:
            type: string
        - name: sort
          in: query
          required: false
          description: Sort field and direction (e.g., name:asc, price:desc)
          schema:
            type: string
            default: "name:asc"
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductsPageResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create a new product
      operationId: createProduct
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/products/{id}:
    get:
      summary: Get a product by ID
      operationId: getProductById
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update an existing product
      operationId: updateProduct
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductRequest'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete a product
      operationId: deleteProduct
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Product deleted successfully
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    CreateProductRequest:
      type: object
      required:
        - name
        - category
        - price
        - brand
        - sku
        - createdBy
      properties:
        name:
          type: string
          description: Product name
          example: "iPhone 15 Pro"
        description:
          type: string
          nullable: true
          description: Product description
          example: "Latest iPhone with advanced features"
        category:
          type: string
          description: Product category
          example: "Electronics"
        price:
          type: number
          format: double
          minimum: 0
          description: Product price
          example: 999.99
        brand:
          type: string
          description: Product brand
          example: "Apple"
        sku:
          type: string
          description: Stock Keeping Unit
          example: "IPH15PRO128"
        specifications:
          type: string
          nullable: true
          description: Product specifications in JSON format
          example: '{"storage": "128GB", "color": "Natural Titanium"}'
        tags:
          type: string
          nullable: true
          description: Product tags
          example: "smartphone,premium,5g"
        createdBy:
          type: string
          description: User who created the product
          example: "admin@example.com"

    UpdateProductRequest:
      type: object
      properties:
        name:
          type: string
          description: Product name
          example: "iPhone 15 Pro"
        description:
          type: string
          nullable: true
          description: Product description
          example: "Latest iPhone with advanced features"
        category:
          type: string
          description: Product category
          example: "Electronics"
        price:
          type: number
          format: double
          minimum: 0
          description: Product price
          example: 999.99
        brand:
          type: string
          description: Product brand
          example: "Apple"
        sku:
          type: string
          description: Stock Keeping Unit
          example: "IPH15PRO128"
        specifications:
          type: string
          nullable: true
          description: Product specifications in JSON format
          example: '{"storage": "128GB", "color": "Natural Titanium"}'
        tags:
          type: string
          nullable: true
          description: Product tags
          example: "smartphone,premium,5g"

    ProductsPageResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ProductResponse'
          description: Products in current page
        pageable:
          $ref: '#/components/schemas/PageableInfo'
        totalElements:
          type: integer
          format: int64
          description: Total number of products
          example: 150
        totalPages:
          type: integer
          description: Total number of pages
          example: 8
        size:
          type: integer
          description: Page size
          example: 20
        number:
          type: integer
          description: Current page number (0-based)
          example: 0
        first:
          type: boolean
          description: Is first page
          example: true
        last:
          type: boolean
          description: Is last page
          example: false
        numberOfElements:
          type: integer
          description: Number of elements in current page
          example: 20

    PageableInfo:
      type: object
      properties:
        sort:
          $ref: '#/components/schemas/SortInfo'
        offset:
          type: integer
          format: int64
          description: Offset of the first element
          example: 0
        pageSize:
          type: integer
          description: Size of the page
          example: 20
        pageNumber:
          type: integer
          description: Page number (0-based)
          example: 0
        paged:
          type: boolean
          description: Is paged
          example: true
        unpaged:
          type: boolean
          description: Is unpaged
          example: false

    SortInfo:
      type: object
      properties:
        empty:
          type: boolean
          description: Is sort empty
          example: false
        sorted:
          type: boolean
          description: Is sorted
          example: true
        unsorted:
          type: boolean
          description: Is unsorted
          example: false

    ProductResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Product ID
          example: 123
        name:
          type: string
          description: Product name
          example: "iPhone 15 Pro"
        description:
          type: string
          nullable: true
          description: Product description
          example: "Latest iPhone with advanced features"
        category:
          type: string
          description: Product category
          example: "Electronics"
        price:
          type: number
          format: double
          description: Product price
          example: 999.99
        brand:
          type: string
          description: Product brand
          example: "Apple"
        sku:
          type: string
          description: Stock Keeping Unit
          example: "IPH15PRO128"
        specifications:
          type: string
          nullable: true
          description: Product specifications in JSON format
          example: '{"storage": "128GB", "color": "Natural Titanium"}'
        tags:
          type: string
          nullable: true
          description: Product tags
          example: "smartphone,premium,5g"
        createdBy:
          type: string
          description: User who created the product
          example: "admin@example.com"
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2024-01-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          nullable: true
          description: Last update timestamp
          example: "2024-01-16T14:20:00Z"
        version:
          type: integer
          format: int64
          description: Version for optimistic locking
          example: 1

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: "Product not found"
        timestamp:
          type: string
          format: date-time
          description: Error timestamp
          example: "2024-01-15T10:30:00Z"
        path:
          type: string
          description: Request path
          example: "/api/v1/products/123"